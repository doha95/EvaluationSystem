{"name": "Test Supervisor Close the evaluation form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n0   chromedriver                        0x0000000100e8c4cc chromedriver + 4162764\n1   chromedriver                        0x0000000100e84654 chromedriver + 4130388\n2   chromedriver                        0x0000000100adb9f8 chromedriver + 293368\n3   chromedriver                        0x0000000100b23870 chromedriver + 587888\n4   chromedriver                        0x0000000100b17994 chromedriver + 539028\n5   chromedriver                        0x0000000100b17250 chromedriver + 537168\n6   chromedriver                        0x0000000100b61ab0 chromedriver + 842416\n7   chromedriver                        0x0000000100b156bc chromedriver + 530108\n8   chromedriver                        0x0000000100b16930 chromedriver + 534832\n9   chromedriver                        0x0000000100e51df8 chromedriver + 3923448\n10  chromedriver                        0x0000000100e563cc chromedriver + 3941324\n11  chromedriver                        0x0000000100e3a028 chromedriver + 3825704\n12  chromedriver                        0x0000000100e56f2c chromedriver + 3944236\n13  chromedriver                        0x0000000100e2c6e4 chromedriver + 3770084\n14  chromedriver                        0x0000000100e73970 chromedriver + 4061552\n15  chromedriver                        0x0000000100e73ae8 chromedriver + 4061928\n16  chromedriver                        0x0000000100e842d4 chromedriver + 4129492\n17  libsystem_pthread.dylib             0x00000001914c026c _pthread_start + 148\n18  libsystem_pthread.dylib             0x00000001914bb08c thread_start + 8", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d8111e88276b9c8ae35434061a7d741e\")>, login_with_supervisor = None\n\n    @allure.feature(\"Supervisor Evaluation features\")\n    @allure.title(\"Test Supervisor Close the evaluation form\")\n    # TODO: is it the pest way? maybe we should added it as step in pytest\n    @pytest.mark.dependency(depends=[\"test_supervisor_submit_evaluation_from\"])\n    def test_supervisor_closing_evaluation_from(driver, login_with_supervisor):\n        home_page = HomePage(driver=driver)\n        supervisor_page = home_page.open_supervisor_evaluation_team_page()\n        supervisor_evaluation_page = supervisor_page.click_open_evaluation_button()\n        supervisor_evaluation_page.click_close_evaluation_button()\n>       supervisor_evaluation_page.click_confirm_close_review_submit()\n\ntests/test_home_page.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObject/submitting_evaluation/EvaluationPage.py:165: in click_confirm_close_review_submit\n    submit_button.click()\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1068a99d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...0001914c026c _pthread_start + 148\\\\n18  libsystem_pthread.dylib             0x00000001914bb08c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=121.0.6167.139)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100e8c4cc chromedriver + 4162764\nE       1   chromedriver                        0x0000000100e84654 chromedriver + 4130388\nE       2   chromedriver                        0x0000000100adb9f8 chromedriver + 293368\nE       3   chromedriver                        0x0000000100b23870 chromedriver + 587888\nE       4   chromedriver                        0x0000000100b17994 chromedriver + 539028\nE       5   chromedriver                        0x0000000100b17250 chromedriver + 537168\nE       6   chromedriver                        0x0000000100b61ab0 chromedriver + 842416\nE       7   chromedriver                        0x0000000100b156bc chromedriver + 530108\nE       8   chromedriver                        0x0000000100b16930 chromedriver + 534832\nE       9   chromedriver                        0x0000000100e51df8 chromedriver + 3923448\nE       10  chromedriver                        0x0000000100e563cc chromedriver + 3941324\nE       11  chromedriver                        0x0000000100e3a028 chromedriver + 3825704\nE       12  chromedriver                        0x0000000100e56f2c chromedriver + 3944236\nE       13  chromedriver                        0x0000000100e2c6e4 chromedriver + 3770084\nE       14  chromedriver                        0x0000000100e73970 chromedriver + 4061552\nE       15  chromedriver                        0x0000000100e73ae8 chromedriver + 4061928\nE       16  chromedriver                        0x0000000100e842d4 chromedriver + 4129492\nE       17  libsystem_pthread.dylib             0x00000001914c026c _pthread_start + 148\nE       18  libsystem_pthread.dylib             0x00000001914bb08c thread_start + 8\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "bf57a193-e4d7-44a3-aaf5-c198f6607c5b-attachment.txt", "type": "text/plain"}], "start": 1707232112333, "stop": 1707232113866, "uuid": "a3006065-e5f6-4989-b340-c5897ba79a95", "historyId": "a2250c7b1df1176c71a6df21c288efd5", "testCaseId": "a2250c7b1df1176c71a6df21c288efd5", "fullName": "tests.test_home_page#test_supervisor_closing_evaluation_from", "labels": [{"name": "feature", "value": "Supervisor Evaluation features"}, {"name": "tag", "value": "dependency(depends=['test_supervisor_submit_evaluation_from'])"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_home_page"}, {"name": "host", "value": "Dohas-MacBook-Pro.local"}, {"name": "thread", "value": "14711-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_home_page"}]}